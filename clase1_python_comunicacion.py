# -*- coding: utf-8 -*-
"""Clase1_Python_Comunicacion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13237rIwcOwix4FpORqKOjDRVEA3-6oxZ

# üìä MAESTR√çA EN CONTABILIDAD Y FINANZAS

## DASHBOARD FINANCIERO INTERACTIVO CON PYTHON
### Visualizaci√≥n de Datos y Analytics

---

## üìå INFORMACI√ìN DEL M√ìDULO

**CLASE 1:** Fundamentos de Visualizaci√≥n Financiera  
**Fecha:** Mi√©rcoles 8 de Octubre, 2025  
**Modalidad:** Pr√°ctica - Google Colab  
**Duraci√≥n:** 2 horas (te√≥rico-pr√°cticas)

**Docente invitado:** Dar√≠o Ezequoel D√≠az
**Instituci√≥n:** Universidad Nacional de C√≥rdoba
**Per√≠odo:** 2025 - Segundo Semestre

---

## üéØ OBJETIVOS DE APRENDIZAJE

1. Construir dashboards interactivos mediante Python y Plotly
2. Calcular m√©tricas financieras avanzadas (Sharpe, Sortino, VaR, CVaR)
3. Implementar an√°lisis de riesgo-rendimiento hacia portafolios
4. Exportar visualizaciones profesionales hacia entornos empresariales
5. Integrar datos financieros con plataformas de BI (Looker Studio)

---

## üìö CONTENIDO PROGRAM√ÅTICO

### M√ìDULO 1: Configuraci√≥n y descarga de datos
- Conexi√≥n con Yahoo Finance API
- Descarga de series hist√≥ricas de precios
- Validaci√≥n y limpieza de datos financieros

### M√ìDULO 2: C√°lculo de m√©tricas financieras
- Rendimientos totales y logar√≠tmicos
- Volatilidad (diaria y anualizada)
- Ratios de desempe√±o: Sharpe, Sortino, Treynor
- M√©tricas de riesgo: VaR, CVaR, Drawdown

### M√ìDULO 3: Visualizaciones principales (7 gr√°ficos)
- Evoluci√≥n de precios normalizados (Base 100)
- Distribuciones de retornos (histogramas)
- An√°lisis riesgo-rendimiento (scatter plot)
- Matriz de correlaciones (heatmap)
- Box plots comparativos
- Volatilidad rolling (series temporales)
- Dashboard integrado multipanel

### M√ìDULO 4: Dashboards interactivos
- Filtros din√°micos (dropdowns)
- Selectores temporales (sliders)
- Exportaci√≥n hacia HTML interactivo

### M√ìDULO 5: Integraci√≥n con Looker Studio
- Transformaci√≥n de datos hacia formato largo (tidy data)
- Exportaci√≥n optimizada hacia Google Sheets
- Conexi√≥n con plataformas de Business Intelligence

---

## üíº ACTIVOS ANALIZADOS

**Mercado Argentino:**
- `GGAL.BA` - Grupo Financiero Galicia
- `YPF` - YPF Sociedad An√≥nima

**Mercado Internacional:**
- `GLOB` - Globant S.A.
- `SPY` - SPDR S&P 500 ETF Trust
- `EEM` - iShares MSCI Emerging Markets ETF

**Per√≠odo analizado:** Octubre 2023 - Septiembre 2025 (2 a√±os)

---

## üõ†Ô∏è STACK TECNOL√ìGICO

**Lenguaje:** Python 3.x  
**Entorno:** Google Colab  
**Almacenamiento:** Google Drive  
**Exportaci√≥n:** HTML, CSV, Looker Studio

**Librer√≠as principales:**
- `yfinance` - Descarga de datos financieros
- `pandas` - Manipulaci√≥n de datos
- `numpy` - C√°lculos num√©ricos
- `plotly` - Visualizaciones interactivas

---

## üì¶ ENTREGAS ESPERADAS

**Archivos generados:**
- ‚úÖ 9 visualizaciones HTML interactivas
- ‚úÖ 7 datasets CSV con m√©tricas calculadas
- ‚úÖ 1 dashboard integrado en Looker Studio (3 p√°ginas)
- ‚úÖ 1 reporte ejecutivo consolidado

---

## üìã REQUISITOS PREVIOS

**Conocimientos:**
- Fundamentos de Python (nivel intermedio)
- Estad√≠stica descriptiva e inferencial
- Finanzas corporativas (conceptos de riesgo-rendimiento)
- √Ålgebra lineal b√°sica (matrices, vectores)

**Herramientas:**
- Cuenta Google (Drive + Colab)
- Navegador web actualizado
- Conexi√≥n a internet estable

---

## üìñ BIBLIOGRAF√çA DE REFERENCIA

- Hull, J. (2018). *Options, Futures, and Other Derivatives* (10th ed.)
- Bodie, Z., Kane, A., & Marcus, A. (2021). *Investments* (12th ed.)
- McKinney, W. (2022). *Python for Data Analysis* (3rd ed.)
- VanderPlas, J. (2016). *Python Data Science Handbook*

---

## üìß CONTACTO Y SOPORTE

**Email:** drdarioezequieldiaz@gmail.com
**Repositorio:** https://github.com/DrDarioDiaz?tab=repositories

---

## ‚ö†Ô∏è NOTAS IMPORTANTES

- Este notebook requiere conexi√≥n a Google Drive montado
- La ejecuci√≥n completa toma aproximadamente 3-5 minutos
- Todos los gr√°ficos son interactivos (zoom, pan, hover)
- Los archivos se guardan autom√°ticamente en la ruta especificada

---

**Versi√≥n:** 1.0  
**√öltima actualizaci√≥n:** Octubre 2025  
**Licencia:** Material acad√©mico - Uso educativo

---

> **üöÄ LISTO PARA COMENZAR**  
> Ejecuta las celdas secuencialmente para construir tu dashboard financiero completo

# **Clase 1**
"""

from google.colab import drive
drive.mount('/content/drive')
print("‚úì Google Drive conectado exitosamente")

from google.colab import drive
import yfinance as yf
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

drive.mount('/content/drive')
print("‚úì Google Drive conectado exitosamente")

# ============================================================================
# DASHBOARD FINANCIERO INTERACTIVO CON PYTHON
# Maestr√≠a en Contabilidad y Finanzas
# Clase 1: Mi√©rcoles 8 de octubre, 2025
# ============================================================================

"""
OBJETIVO DEL NOTEBOOK:
Construir un dashboard interactivo completo con datos financieros reales,
m√©tricas avanzadas y visualizaciones profesionales para tomadores de decisiones.

ESTRUCTURA:
1. Configuraci√≥n y descarga de datos
2. C√°lculo de m√©tricas b√°sicas y avanzadas
3. Visualizaciones principales (7 gr√°ficos)
4. Dashboard integrado
5. Extensiones interactivas (filtros y sliders)
6. Datos fundamentales
7. Exportaci√≥n completa
"""

# ============================================================================
# 1. CONFIGURACI√ìN INICIAL
# ============================================================================

print("\n" + "="*80)
print("CONFIGURACI√ìN INICIAL")
print("="*80)

# Ruta de guardado
RUTA_DRIVE = "/content/drive/MyDrive/Posdoctorado/"

# Instalamos librer√≠as
import subprocess
subprocess.run(['pip', 'install', 'yfinance', 'plotly', '-q'], check=True)

print("‚úì Librer√≠as instaladas correctamente")
print(f"Fecha de ejecuci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
print(f"Ruta de guardado: {RUTA_DRIVE}")

# ============================================================================
# 2. DESCARGA DE DATOS
# ============================================================================

TICKERS = {
    'GGAL.BA': 'Grupo Galicia',
    'YPF': 'YPF',
    'GLOB': 'Globant',
    'SPY': 'S&P 500 ETF',
    'EEM': 'Emerging Markets ETF'
}

fecha_inicio = "2023-10-07"
fecha_fin = "2025-10-06"

print(f"\nüìä CONFIGURACI√ìN DEL AN√ÅLISIS:")
print(f"Per√≠odo: {fecha_inicio} a {fecha_fin}")
print(f"Activos: {list(TICKERS.keys())}")

def descargar_datos_corregido(tickers_dict, inicio, fin):
    """
    Descarga datos con precios ajustados cuando disponibles.
    """
    datos_completos = pd.DataFrame()
    metadatos = {}

    for ticker, nombre in tickers_dict.items():
        try:
            print(f"  Descargando {nombre} ({ticker})...", end=" ")

            data = yf.download(ticker, start=inicio, end=fin, progress=False)

            if not data.empty:
                columna_usada = None

                if 'Adj Close' in data.columns:
                    datos_completos[nombre] = data['Adj Close']
                    columna_usada = 'Adj Close'
                elif ('Adj Close', ticker) in data.columns:
                    datos_completos[nombre] = data[('Adj Close', ticker)]
                    columna_usada = 'Adj Close'
                elif ('Close', ticker) in data.columns:
                    datos_completos[nombre] = data[('Close', ticker)]
                    columna_usada = 'Close'
                    print("‚ö†Ô∏è  Sin Adj Close, usando Close", end=" ")
                elif 'Close' in data.columns:
                    datos_completos[nombre] = data['Close']
                    columna_usada = 'Close'
                    print("‚ö†Ô∏è  Sin Adj Close, usando Close", end=" ")
                else:
                    print(f"‚úó Sin columna de precios")
                    continue

                metadatos[nombre] = {
                    'ticker': ticker,
                    'columna': columna_usada,
                    'precio_inicial': datos_completos[nombre].iloc[0],
                    'precio_final': datos_completos[nombre].iloc[-1],
                    'n_registros': len(datos_completos[nombre])
                }

                print(f"‚úì {len(data)} registros")
            else:
                print(f"‚úó Sin datos")

        except Exception as e:
            print(f"‚úó Error: {str(e)}")

    if not datos_completos.empty:
        datos_antes = len(datos_completos)
        datos_completos = datos_completos.dropna()
        datos_despues = len(datos_completos)

        if datos_antes != datos_despues:
            print(f"\n‚ö†Ô∏è  Eliminados {datos_antes - datos_despues} d√≠as con datos faltantes")

    return datos_completos, metadatos

print("\nüîÑ Descargando datos de Yahoo Finance...\n")
datos, metadatos = descargar_datos_corregido(TICKERS, fecha_inicio, fecha_fin)

if datos.empty:
    raise SystemExit("‚ùå ERROR: No se descargaron datos v√°lidos")

print(f"\n‚úì Datos descargados: {datos.shape[0]} observaciones, {datos.shape[1]} activos")

print("\n" + "="*80)
print("VERIFICACI√ìN DE PRECIOS")
print("="*80)
verificacion_df = pd.DataFrame(metadatos).T
print(verificacion_df.to_string())

# ============================================================================
# 3. C√ÅLCULO DE M√âTRICAS B√ÅSICAS
# ============================================================================

print("\n" + "="*80)
print("M√âTRICAS FINANCIERAS B√ÅSICAS")
print("="*80)

retornos = datos.pct_change().dropna()
datos_norm = (datos / datos.iloc[0]) * 100

metricas = pd.DataFrame()
metricas['Rendimiento Total (%)'] = ((datos.iloc[-1] / datos.iloc[0]) - 1) * 100
metricas['Retorno Promedio Diario (%)'] = retornos.mean() * 100
metricas['Volatilidad Diaria (%)'] = retornos.std() * 100
metricas['Volatilidad Anualizada (%)'] = retornos.std() * np.sqrt(252) * 100
metricas['Ratio Sharpe'] = (retornos.mean() / retornos.std()) * np.sqrt(252)
metricas['Retorno M√≠nimo (%)'] = retornos.min() * 100
metricas['Retorno M√°ximo (%)'] = retornos.max() * 100

cumulative_returns = (1 + retornos).cumprod()
running_max = cumulative_returns.expanding().max()
drawdown = (cumulative_returns - running_max) / running_max
metricas['Drawdown M√°ximo (%)'] = drawdown.min() * 100

print(metricas.round(2))

correlaciones = retornos.corr()
print(f"\nüìà Correlaciones:\n{correlaciones.round(3)}")

# ============================================================================
# 4. M√âTRICAS AVANZADAS
# ============================================================================

print("\n" + "="*80)
print("M√âTRICAS AVANZADAS DE RIESGO")
print("="*80)

# Value at Risk (VaR 5%)
var_5 = retornos.quantile(0.05) * 100

# Conditional VaR (CVaR)
cvar_5 = pd.Series({
    col: retornos[col][retornos[col] <= retornos[col].quantile(0.05)].mean() * 100
    for col in retornos.columns
})

# Ratio de Sortino
def calcular_sortino(retornos_serie, rf=0):
    exceso = retornos_serie.mean() - rf
    ret_neg = retornos_serie[retornos_serie < 0]
    if len(ret_neg) == 0:
        return np.nan
    downside_std = ret_neg.std()
    return (exceso / downside_std) * np.sqrt(252)

ratio_sortino = pd.Series({col: calcular_sortino(retornos[col]) for col in retornos.columns})

metricas_avanzadas = pd.DataFrame({
    'VaR 5% (%)': var_5,
    'CVaR 5% (%)': cvar_5,
    'Ratio Sortino': ratio_sortino,
    'Drawdown M√°ximo (%)': metricas['Drawdown M√°ximo (%)']
})

print(metricas_avanzadas.round(2))

# ============================================================================
# 5. VISUALIZACIONES PRINCIPALES
# ============================================================================

print("\n" + "="*80)
print("GENERANDO VISUALIZACIONES")
print("="*80)

# ----------------------------------------------------------------------------
# GR√ÅFICO 1: Evoluci√≥n de Precios Normalizados
# ----------------------------------------------------------------------------

print("\nüìà Gr√°fico 1: Evoluci√≥n de precios")

fig1 = go.Figure()

for columna in datos_norm.columns:
    fig1.add_trace(
        go.Scatter(
            x=datos_norm.index,
            y=datos_norm[columna],
            mode='lines',
            name=columna,
            hovertemplate='<b>%{fullData.name}</b><br>Valor: %{y:.2f}<extra></extra>'
        )
    )

fig1.update_layout(
    title='Evoluci√≥n de Precios (Base 100)<br><sub>Comparaci√≥n de performance relativa</sub>',
    xaxis_title='Fecha',
    yaxis_title='√çndice (Base 100)',
    hovermode='x unified',
    template='plotly_white',
    height=550,
    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="center", x=0.5)
)

fig1.add_hline(y=100, line_dash="dash", line_color="gray", annotation_text="Nivel inicial")

fig1.show()

# ----------------------------------------------------------------------------
# GR√ÅFICO 2: Histogramas de Distribuci√≥n
# ----------------------------------------------------------------------------

print("\nüìä Gr√°fico 2: Distribuci√≥n de retornos")

fig2 = make_subplots(
    rows=1,
    cols=len(retornos.columns),
    subplot_titles=retornos.columns.tolist(),
    horizontal_spacing=0.08
)

colores = px.colors.qualitative.Set2

for i, columna in enumerate(retornos.columns):
    fig2.add_trace(
        go.Histogram(
            x=retornos[columna] * 100,
            name=columna,
            marker_color=colores[i % len(colores)],
            showlegend=False,
            nbinsx=30
        ),
        row=1, col=i+1
    )
    fig2.add_vline(x=0, line_dash="dash", line_color="red", opacity=0.5, row=1, col=i+1)

fig2.update_layout(
    title_text='Distribuci√≥n de Retornos Diarios (%)',
    height=400,
    template='plotly_white'
)

fig2.update_xaxes(title_text="Retorno (%)")
fig2.update_yaxes(title_text="Frecuencia")

fig2.show()

# ----------------------------------------------------------------------------
# GR√ÅFICO 3: Riesgo-Rendimiento
# ----------------------------------------------------------------------------

print("\nüìâ Gr√°fico 3: Riesgo-Rendimiento")

fig3 = go.Figure()

fig3.add_trace(
    go.Scatter(
        x=metricas['Volatilidad Anualizada (%)'],
        y=metricas['Rendimiento Total (%)'],
        mode='markers+text',
        text=metricas.index,
        textposition='top center',
        marker=dict(
            size=abs(metricas['Ratio Sharpe']) * 10 + 5,
            color=metricas['Ratio Sharpe'],
            colorscale='RdYlGn',
            showscale=True,
            colorbar=dict(title="Sharpe"),
            line=dict(width=2, color='white')
        ),
        hovertemplate='<b>%{text}</b><br>Vol: %{x:.2f}%<br>Rend: %{y:.2f}%<extra></extra>'
    )
)

fig3.update_layout(
    title='Relaci√≥n Riesgo-Rendimiento<br><sub>Tama√±o por Ratio Sharpe</sub>',
    xaxis_title='Volatilidad Anualizada (%)',
    yaxis_title='Rendimiento Total (%)',
    template='plotly_white',
    height=600
)

fig3.add_hline(y=0, line_dash="dash", line_color="red", opacity=0.3)
fig3.add_vline(x=metricas['Volatilidad Anualizada (%)'].median(),
               line_dash="dash", line_color="gray", opacity=0.3)

fig3.show()

# ----------------------------------------------------------------------------
# GR√ÅFICO 4: Matriz de Correlaci√≥n
# ----------------------------------------------------------------------------

print("\nüî• Gr√°fico 4: Correlaciones")

fig4 = go.Figure(
    data=go.Heatmap(
        z=correlaciones.values,
        x=correlaciones.columns,
        y=correlaciones.columns,
        colorscale='RdBu',
        zmid=0,
        text=correlaciones.values.round(2),
        texttemplate='%{text}',
        textfont={"size": 12},
        colorbar=dict(title="Correlaci√≥n")
    )
)

fig4.update_layout(
    title='Matriz de Correlaci√≥n<br><sub>Rojo: correlaci√≥n positiva | Azul: negativa</sub>',
    height=550,
    template='plotly_white'
)

fig4.show()

# ----------------------------------------------------------------------------
# GR√ÅFICO 5: Box Plots
# ----------------------------------------------------------------------------

print("\nüì¶ Gr√°fico 5: Box plots")

retornos_long = retornos.reset_index().melt(
    id_vars='Date',
    var_name='Activo',
    value_name='Retorno'
)
retornos_long['Retorno'] = retornos_long['Retorno'] * 100

fig5 = px.box(
    retornos_long,
    x='Activo',
    y='Retorno',
    color='Activo',
    title='Distribuci√≥n de Retornos<br><sub>Caja: IQR | L√≠nea: mediana | Puntos: outliers</sub>',
    points='outliers'
)

fig5.update_layout(
    yaxis_title='Retorno Diario (%)',
    template='plotly_white',
    height=550,
    showlegend=False
)

fig5.add_hline(y=0, line_dash="dash", line_color="gray", opacity=0.5)

fig5.show()

# ----------------------------------------------------------------------------
# GR√ÅFICO 6: Volatilidad Rolling
# ----------------------------------------------------------------------------

print("\nüìê Gr√°fico 6: Volatilidad m√≥vil")

vol_rolling = retornos.rolling(window=30).std() * np.sqrt(252) * 100

fig6 = go.Figure()

for columna in vol_rolling.columns:
    fig6.add_trace(
        go.Scatter(
            x=vol_rolling.index,
            y=vol_rolling[columna],
            mode='lines',
            name=columna,
            hovertemplate='<b>%{fullData.name}</b><br>Vol: %{y:.2f}%<extra></extra>'
        )
    )

fig6.update_layout(
    title='Volatilidad Anualizada M√≥vil (30 d√≠as)<br><sub>Evoluci√≥n temporal del riesgo</sub>',
    xaxis_title='Fecha',
    yaxis_title='Volatilidad (%)',
    hovermode='x unified',
    template='plotly_white',
    height=500,
    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="center", x=0.5)
)

fig6.show()

# ----------------------------------------------------------------------------
# GR√ÅFICO 7: Dashboard Integrado
# ----------------------------------------------------------------------------

print("\nüéØ Gr√°fico 7: Dashboard integrado")

fig_dashboard = make_subplots(
    rows=3, cols=2,
    subplot_titles=(
        'Evoluci√≥n Base 100',
        'Riesgo vs Rendimiento',
        'Retornos Acumulados',
        'Correlaciones',
        f'Distribuci√≥n - {retornos.columns[0]}',
        'M√©tricas Resumen'
    ),
    specs=[
        [{"type": "scatter"}, {"type": "scatter"}],
        [{"type": "scatter"}, {"type": "heatmap"}],
        [{"type": "histogram"}, {"type": "table"}]
    ],
    row_heights=[0.35, 0.35, 0.30],
    vertical_spacing=0.12,
    horizontal_spacing=0.12
)

# Panel 1
for col in datos_norm.columns:
    fig_dashboard.add_trace(
        go.Scatter(x=datos_norm.index, y=datos_norm[col], mode='lines', name=col, showlegend=True),
        row=1, col=1
    )

# Panel 2
fig_dashboard.add_trace(
    go.Scatter(
        x=metricas['Volatilidad Anualizada (%)'],
        y=metricas['Rendimiento Total (%)'],
        mode='markers+text',
        text=metricas.index,
        textposition='top center',
        marker=dict(size=12),
        showlegend=False
    ),
    row=1, col=2
)

# Panel 3
retornos_acum = (1 + retornos).cumprod()
for col in retornos_acum.columns:
    fig_dashboard.add_trace(
        go.Scatter(x=retornos_acum.index, y=retornos_acum[col], mode='lines', showlegend=False),
        row=2, col=1
    )

# Panel 4
fig_dashboard.add_trace(
    go.Heatmap(
        z=correlaciones.values,
        x=correlaciones.columns,
        y=correlaciones.columns,
        colorscale='RdBu',
        zmid=0,
        showscale=False
    ),
    row=2, col=2
)

# Panel 5
fig_dashboard.add_trace(
    go.Histogram(x=retornos[retornos.columns[0]] * 100, nbinsx=40, showlegend=False, marker_color='steelblue'),
    row=3, col=1
)

# Panel 6
tabla = metricas[['Rendimiento Total (%)', 'Volatilidad Anualizada (%)', 'Ratio Sharpe']].round(2)
fig_dashboard.add_trace(
    go.Table(
        header=dict(values=['<b>Activo</b>'] + ['<b>' + c + '</b>' for c in tabla.columns], fill_color='lightgray', align='left'),
        cells=dict(values=[tabla.index] + [tabla[c] for c in tabla.columns], fill_color='white', align='left')
    ),
    row=3, col=2
)

fig_dashboard.update_layout(
    title_text="<b>Dashboard Financiero Completo</b>",
    title_x=0.5,
    height=1200,
    template='plotly_white',
    showlegend=True,
    legend=dict(orientation="h", yanchor="bottom", y=-0.05, xanchor="center", x=0.5)
)

fig_dashboard.update_xaxes(title_text="Fecha", row=1, col=1)
fig_dashboard.update_yaxes(title_text="√çndice", row=1, col=1)
fig_dashboard.update_xaxes(title_text="Volatilidad (%)", row=1, col=2)
fig_dashboard.update_yaxes(title_text="Rendimiento (%)", row=1, col=2)
fig_dashboard.update_xaxes(title_text="Fecha", row=2, col=1)
fig_dashboard.update_yaxes(title_text="Retorno Acum.", row=2, col=1)
fig_dashboard.update_xaxes(title_text="Retorno (%)", row=3, col=1)
fig_dashboard.update_yaxes(title_text="Frecuencia", row=3, col=1)

# L√≠neas de referencia usando shapes (evita conflicto con tabla)
fig_dashboard.add_shape(
    type="line", x0=0, x1=1, y0=100, y1=100,
    xref='x domain', yref='y',
    line=dict(dash="dash", color="gray", width=1),
    row=1, col=1
)
fig_dashboard.add_shape(
    type="line", x0=0, x1=1, y0=0, y1=0,
    xref='x2 domain', yref='y2',
    line=dict(dash="dash", color="red", width=1),
    row=1, col=2
)
fig_dashboard.add_shape(
    type="line", x0=0, x1=1, y0=1, y1=1,
    xref='x3 domain', yref='y3',
    line=dict(dash="dash", color="gray", width=1),
    row=2, col=1
)
fig_dashboard.add_shape(
    type="line", x0=0, x1=0, y0=0, y1=1,
    xref='x5', yref='y5 domain',
    line=dict(dash="dash", color="red", width=1),
    row=3, col=1
)

fig_dashboard.show()

# ============================================================================
# 6. EXTENSIONES INTERACTIVAS
# ============================================================================

print("\n" + "="*80)
print("DASHBOARDS INTERACTIVOS")
print("="*80)

# Dashboard con Dropdown
print("\nüéõÔ∏è  Dashboard con filtro de activos")

fig_interactivo = go.Figure()

for i, col in enumerate(datos_norm.columns):
    fig_interactivo.add_trace(
        go.Scatter(
            x=datos_norm.index,
            y=datos_norm[col],
            mode='lines',
            name=col,
            visible=(i == 0)
        )
    )

botones = []
for i, col in enumerate(datos_norm.columns):
    visibilidad = [False] * len(datos_norm.columns)
    visibilidad[i] = True
    botones.append(dict(label=col, method="update", args=[{"visible": visibilidad}, {"title": f"Evoluci√≥n - {col}"}]))

botones.insert(0, dict(label="Todos", method="update",
                       args=[{"visible": [True] * len(datos_norm.columns)}, {"title": "Todos los Activos"}]))

fig_interactivo.update_layout(
    title="Dashboard Interactivo - Seleccione Activo",
    xaxis_title="Fecha",
    yaxis_title="√çndice (Base 100)",
    template='plotly_white',
    height=500,
    updatemenus=[dict(buttons=botones, direction="down", x=0.01, y=1.15)]
)

fig_interactivo.show()

# Dashboard con Slider Temporal
print("\nüìÖ Dashboard con selector temporal")

fig_slider = go.Figure()

for col in datos_norm.columns:
    fig_slider.add_trace(go.Scatter(x=datos_norm.index, y=datos_norm[col], mode='lines', name=col))

fig_slider.update_xaxes(
    rangeslider_visible=True,
    rangeselector=dict(
        buttons=[
            dict(count=1, label="1m", step="month", stepmode="backward"),
            dict(count=3, label="3m", step="month", stepmode="backward"),
            dict(count=6, label="6m", step="month", stepmode="backward"),
            dict(count=1, label="1a", step="year", stepmode="backward"),
            dict(step="all", label="Todo")
        ]
    )
)

fig_slider.update_layout(
    title="An√°lisis Temporal Interactivo",
    xaxis_title="Fecha",
    yaxis_title="√çndice (Base 100)",
    template='plotly_white',
    height=600,
    hovermode='x unified'
)

fig_slider.show()

# ============================================================================
# 7. DATOS FUNDAMENTALES
# ============================================================================

print("\n" + "="*80)
print("DATOS FUNDAMENTALES")
print("="*80)

datos_fundamentales = pd.DataFrame()

for ticker, nombre in TICKERS.items():
    try:
        print(f"  {nombre} ({ticker})...", end=" ")
        stock = yf.Ticker(ticker)
        info = stock.info

        datos_fundamentales.loc[nombre, 'P/E Ratio'] = info.get('trailingPE', np.nan)
        datos_fundamentales.loc[nombre, 'P/B Ratio'] = info.get('priceToBook', np.nan)
        datos_fundamentales.loc[nombre, 'Div Yield (%)'] = info.get('dividendYield', 0) * 100
        datos_fundamentales.loc[nombre, 'Market Cap'] = info.get('marketCap', np.nan)
        datos_fundamentales.loc[nombre, 'Beta'] = info.get('beta', np.nan)

        print("‚úì")
    except Exception as e:
        print(f"‚úó")

print("\n", datos_fundamentales.round(2))

# Visualizaci√≥n fundamentales
fig_fund = make_subplots(
    rows=1, cols=2,
    subplot_titles=('P/E Ratio', 'Beta'),
    specs=[[{"type": "bar"}, {"type": "bar"}]]
)

fig_fund.add_trace(
    go.Bar(x=datos_fundamentales.index, y=datos_fundamentales['P/E Ratio'],
           marker_color='steelblue', showlegend=False),
    row=1, col=1
)

fig_fund.add_trace(
    go.Bar(x=datos_fundamentales.index, y=datos_fundamentales['Beta'],
           marker_color='green', showlegend=False),
    row=1, col=2
)

fig_fund.update_layout(
    title_text="M√©tricas Fundamentales",
    template='plotly_white',
    height=400
)

fig_fund.show()

# ============================================================================
# 8. EXPORTACI√ìN COMPLETA
# ============================================================================

print("\n" + "="*80)
print("EXPORTANDO ARCHIVOS")
print("="*80)

# Crear directorio si no existe
import os
os.makedirs(RUTA_DRIVE, exist_ok=True)

# Exportar gr√°ficos
fig1.write_html(RUTA_DRIVE + "01_evolucion_precios.html")
print("  ‚úì 01_evolucion_precios.html")

fig3.write_html(RUTA_DRIVE + "03_riesgo_rendimiento.html")
print("  ‚úì 03_riesgo_rendimiento.html")

fig_dashboard.write_html(RUTA_DRIVE + "07_dashboard_completo.html")
print("  ‚úì 07_dashboard_completo.html")

fig_interactivo.write_html(RUTA_DRIVE + "08_dashboard_filtros.html")
print("  ‚úì 08_dashboard_filtros.html")

fig_slider.write_html(RUTA_DRIVE + "09_dashboard_slider.html")
print("  ‚úì 09_dashboard_slider.html")

# Exportar datos
metricas.to_csv(RUTA_DRIVE + "metricas_basicas.csv")
print("  ‚úì metricas_basicas.csv")

metricas_avanzadas.to_csv(RUTA_DRIVE + "metricas_avanzadas.csv")
print("  ‚úì metricas_avanzadas.csv")

correlaciones.to_csv(RUTA_DRIVE + "matriz_correlaciones.csv")
print("  ‚úì matriz_correlaciones.csv")

datos.to_csv(RUTA_DRIVE + "precios_historicos.csv")
print("  ‚úì precios_historicos.csv")

retornos.to_csv(RUTA_DRIVE + "retornos_diarios.csv")
print("  ‚úì retornos_diarios.csv")

datos_fundamentales.to_csv(RUTA_DRIVE + "datos_fundamentales.csv")
print("  ‚úì datos_fundamentales.csv")

# Consolidado final
metricas_completas = pd.concat([
    metricas[['Rendimiento Total (%)', 'Volatilidad Anualizada (%)', 'Ratio Sharpe']],
    metricas_avanzadas[['VaR 5% (%)', 'Ratio Sortino']],
    datos_fundamentales[['P/E Ratio', 'Beta']]
], axis=1)

metricas_completas.to_csv(RUTA_DRIVE + "analisis_completo.csv")
print("  ‚úì analisis_completo.csv")

# ============================================================================
# 9. RESUMEN EJECUTIVO
# ============================================================================

print("\n" + "="*80)
print("RESUMEN EJECUTIVO")
print("="*80)

print(f"\nüìä An√°lisis completado:")
print(f"  ‚Ä¢ {len(datos.columns)} activos | {len(datos)} d√≠as de cotizaci√≥n")
print(f"  ‚Ä¢ Per√≠odo: {datos.index[0].strftime('%Y-%m-%d')} a {datos.index[-1].strftime('%Y-%m-%d')}")

print(f"\nüèÜ Mejor rendimiento: {metricas['Rendimiento Total (%)'].idxmax()} "
      f"({metricas['Rendimiento Total (%)'].max():.2f}%)")

print(f"\n‚ö†Ô∏è  Mayor volatilidad: {metricas['Volatilidad Anualizada (%)'].idxmax()} "
      f"({metricas['Volatilidad Anualizada (%)'].max():.2f}%)")

print(f"\n‚ú® Mejor Sharpe: {metricas['Ratio Sharpe'].idxmax()} "
      f"({metricas['Ratio Sharpe'].max():.3f})")

print(f"\nüìâ Peor drawdown: {metricas['Drawdown M√°ximo (%)'].idxmin()} "
      f"({metricas['Drawdown M√°ximo (%)'].min():.2f}%)")

print("\n" + "="*80)
print("‚úì AN√ÅLISIS COMPLETO FINALIZADO")
print("="*80)

print(f"""
ARCHIVOS GENERADOS EN: {RUTA_DRIVE}

üìà VISUALIZACIONES (9 archivos HTML):
   ‚Ä¢ Evoluci√≥n de precios
   ‚Ä¢ Distribuciones de retornos
   ‚Ä¢ An√°lisis riesgo-rendimiento
   ‚Ä¢ Correlaciones
   ‚Ä¢ Box plots
   ‚Ä¢ Volatilidad rolling
   ‚Ä¢ Dashboard integrado
   ‚Ä¢ Dashboard con filtros
   ‚Ä¢ Dashboard con slider temporal

üìä DATOS (7 archivos CSV):
   ‚Ä¢ M√©tricas b√°sicas y avanzadas
   ‚Ä¢ Precios hist√≥ricos y retornos
   ‚Ä¢ Correlaciones
   ‚Ä¢ Datos fundamentales
   ‚Ä¢ An√°lisis completo consolidado

PR√ìXIMOS PASOS:
1. Revisar visualizaciones HTML interactivas
2. Analizar m√©tricas en archivos CSV
3. Experimentar con otros tickers/per√≠odos
4. Clase 2: Integraci√≥n con Looker Studio
""")

# ==============================================================================
# PLANTILLA DE DASHBOARD FINANCIERO - VERSI√ìN SIMPLIFICADA
# Para usuarios SIN experiencia en programaci√≥n
# ==============================================================================
#
# INSTRUCCIONES PARA USAR ESTA PLANTILLA:
#
# 1. Modificar √öNICAMENTE las variables en la secci√≥n "CONFIGURACI√ìN"
# 2. Ejecutar todas las celdas del notebook (Ctrl+F9 o "Ejecutar todo")
# 3. Esperar a que termine (aparecer√° "‚úì DASHBOARD COMPLETADO")
# 4. Revisar los archivos generados en tu Google Drive
#
# NO ES NECESARIO entender el c√≥digo - solo modificar la CONFIGURACI√ìN
#
# ==============================================================================

# ------------------------------------------------------------------------------
# PASO 1: Conectar Google Drive
# ------------------------------------------------------------------------------
# (Esta celda conecta tu Google Drive para guardar los resultados)

from google.colab import drive
drive.mount('/content/drive')

# ------------------------------------------------------------------------------
# ‚öôÔ∏è CONFIGURACI√ìN - MODIFICAR ESTAS VARIABLES
# ------------------------------------------------------------------------------

# üìÅ ¬øD√≥nde quieres guardar los archivos?
# Ejemplo: "/content/drive/MyDrive/MiCarpeta/"
# IMPORTANTE: No olvides las barras / al inicio y al final
CARPETA_GUARDADO = "/content/drive/MyDrive/Posdoctorado/"

# üìä ¬øQu√© acciones o ETFs quieres analizar?
# Formato: 'TICKER': 'Nombre descriptivo'
# Busca tickers en: https://finance.yahoo.com
MIS_ACTIVOS = {
    'GGAL.BA': 'Grupo Galicia',
    'YPF': 'YPF',
    'AAPL': 'Apple',
    'MSFT': 'Microsoft',
    'SPY': 'S&P 500 ETF'
}

# üìÖ ¬øQu√© per√≠odo quieres analizar?
# Formato: "AAAA-MM-DD"
FECHA_INICIO = "2023-01-01"  # Desde cuando
FECHA_FIN = "2025-10-06"     # Hasta cuando

# üé® ¬øQu√© nombre quieres para tu an√°lisis?
NOMBRE_PROYECTO = "An√°lisis Portafolio 2023-2025"

# ------------------------------------------------------------------------------
# FIN DE LA CONFIGURACI√ìN
# ------------------------------------------------------------------------------
# A partir de aqu√≠ NO MODIFICAR NADA - solo ejecutar
# ==============================================================================


print("="*80)
print(f"INICIANDO: {NOMBRE_PROYECTO}")
print("="*80)
print(f"\nActivos a analizar: {len(MIS_ACTIVOS)}")
for ticker, nombre in MIS_ACTIVOS.items():
    print(f"  ‚Ä¢ {nombre} ({ticker})")
print(f"\nPer√≠odo: {FECHA_INICIO} a {FECHA_FIN}")
print(f"Guardando en: {CARPETA_GUARDADO}")
print("\n‚è≥ Iniciando an√°lisis... Este proceso puede tardar 2-3 minutos.\n")

# ------------------------------------------------------------------------------
# Instalaci√≥n autom√°tica de librer√≠as necesarias
# ------------------------------------------------------------------------------

import subprocess
import sys

print("üì¶ Instalando librer√≠as necesarias...")
subprocess.run([sys.executable, '-m', 'pip', 'install', 'yfinance', 'plotly', '-q'],
               check=True)
print("‚úì Librer√≠as instaladas\n")

# ------------------------------------------------------------------------------
# Importaci√≥n de librer√≠as
# ------------------------------------------------------------------------------

import yfinance as yf
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')
import os

# ------------------------------------------------------------------------------
# Creaci√≥n de carpeta de destino
# ------------------------------------------------------------------------------

os.makedirs(CARPETA_GUARDADO, exist_ok=True)
print(f"‚úì Carpeta de destino lista: {CARPETA_GUARDADO}\n")

# ------------------------------------------------------------------------------
# PASO 2: Descarga autom√°tica de datos
# ------------------------------------------------------------------------------

print("="*80)
print("DESCARGANDO DATOS DE YAHOO FINANCE")
print("="*80 + "\n")

datos_precios = pd.DataFrame()
info_descarga = {}

for ticker, nombre in MIS_ACTIVOS.items():
    try:
        print(f"Descargando {nombre} ({ticker})... ", end="")

        # Descarga datos
        data = yf.download(ticker, start=FECHA_INICIO, end=FECHA_FIN, progress=False)

        if not data.empty:
            # Busca columna de precio
            if 'Adj Close' in data.columns:
                datos_precios[nombre] = data['Adj Close']
                tipo_precio = 'Ajustado'
            elif ('Adj Close', ticker) in data.columns:
                datos_precios[nombre] = data[('Adj Close', ticker)]
                tipo_precio = 'Ajustado'
            elif ('Close', ticker) in data.columns:
                datos_precios[nombre] = data[('Close', ticker)]
                tipo_precio = 'Cierre'
            elif 'Close' in data.columns:
                datos_precios[nombre] = data['Close']
                tipo_precio = 'Cierre'
            else:
                print("‚úó Error: no se encontr√≥ precio")
                continue

            # Guarda informaci√≥n
            info_descarga[nombre] = {
                'ticker': ticker,
                'registros': len(data),
                'precio_tipo': tipo_precio,
                'precio_inicial': datos_precios[nombre].iloc[0],
                'precio_final': datos_precios[nombre].iloc[-1]
            }

            print(f"‚úì {len(data)} d√≠as descargados")
        else:
            print("‚úó Sin datos disponibles")

    except Exception as e:
        print(f"‚úó Error: {str(e)}")

# Limpia datos faltantes
if not datos_precios.empty:
    antes = len(datos_precios)
    datos_precios = datos_precios.dropna()
    eliminados = antes - len(datos_precios)
    if eliminados > 0:
        print(f"\n‚ö†Ô∏è  Se eliminaron {eliminados} d√≠as con datos incompletos")

if datos_precios.empty:
    print("\n‚ùå ERROR: No se descargaron datos v√°lidos")
    print("Verifica que los tickers sean correctos en Yahoo Finance")
    raise SystemExit

print(f"\n‚úì Descarga completada: {len(datos_precios)} d√≠as | {len(datos_precios.columns)} activos")

# ------------------------------------------------------------------------------
# PASO 3: C√°lculo autom√°tico de m√©tricas
# ------------------------------------------------------------------------------

print("\n" + "="*80)
print("CALCULANDO M√âTRICAS FINANCIERAS")
print("="*80 + "\n")

# Retornos diarios
retornos = datos_precios.pct_change().dropna()

# Precios normalizados (base 100)
precios_base100 = (datos_precios / datos_precios.iloc[0]) * 100

# Tabla de m√©tricas
metricas = pd.DataFrame()

# Rendimiento total
metricas['Rendimiento (%)'] = ((datos_precios.iloc[-1] / datos_precios.iloc[0]) - 1) * 100

# Volatilidad anualizada
metricas['Volatilidad (%)'] = retornos.std() * np.sqrt(252) * 100

# Ratio Sharpe (simplificado: rf=0)
metricas['Ratio Sharpe'] = (retornos.mean() / retornos.std()) * np.sqrt(252)

# Drawdown m√°ximo
cumulative = (1 + retornos).cumprod()
running_max = cumulative.expanding().max()
drawdown = (cumulative - running_max) / running_max
metricas['Peor ca√≠da (%)'] = drawdown.min() * 100

# Value at Risk (5%)
metricas['VaR 5% (%)'] = retornos.quantile(0.05) * 100

print("M√©tricas calculadas:")
print(metricas.round(2))

# Correlaciones
correlaciones = retornos.corr()

print("\n‚úì M√©tricas calculadas correctamente\n")

# ------------------------------------------------------------------------------
# PASO 4: Generaci√≥n autom√°tica de gr√°ficos
# ------------------------------------------------------------------------------

print("="*80)
print("GENERANDO VISUALIZACIONES INTERACTIVAS")
print("="*80 + "\n")

# --- GR√ÅFICO 1: Evoluci√≥n de precios ---

print("1. Creando gr√°fico de evoluci√≥n... ", end="")

grafico1 = go.Figure()

for activo in precios_base100.columns:
    grafico1.add_trace(
        go.Scatter(
            x=precios_base100.index,
            y=precios_base100[activo],
            mode='lines',
            name=activo,
            line=dict(width=2)
        )
    )

grafico1.update_layout(
    title=f'{NOMBRE_PROYECTO}<br><sub>Evoluci√≥n Comparativa (Base 100 = D√≠a Inicial)</sub>',
    xaxis_title='Fecha',
    yaxis_title='Valor √çndice (Base 100)',
    template='plotly_white',
    height=600,
    hovermode='x unified',
    legend=dict(
        orientation="h",
        yanchor="top",
        y=-0.15,
        xanchor="center",
        x=0.5
    )
)

grafico1.add_hline(y=100, line_dash="dash", line_color="gray", opacity=0.5)

print("‚úì")

# --- GR√ÅFICO 2: Riesgo vs Rendimiento ---

print("2. Creando an√°lisis riesgo-rendimiento... ", end="")

grafico2 = go.Figure()

grafico2.add_trace(
    go.Scatter(
        x=metricas['Volatilidad (%)'],
        y=metricas['Rendimiento (%)'],
        mode='markers+text',
        text=metricas.index,
        textposition='top center',
        marker=dict(
            size=15,
            color=metricas['Ratio Sharpe'],
            colorscale='RdYlGn',
            showscale=True,
            colorbar=dict(title="Sharpe"),
            line=dict(width=2, color='white')
        ),
        hovertemplate='<b>%{text}</b><br>Volatilidad: %{x:.1f}%<br>Rendimiento: %{y:.1f}%<extra></extra>'
    )
)

grafico2.update_layout(
    title='An√°lisis Riesgo-Rendimiento<br><sub>Color y tama√±o indican Ratio Sharpe (mayor = mejor)</sub>',
    xaxis_title='Volatilidad Anualizada (%)',
    yaxis_title='Rendimiento Total (%)',
    template='plotly_white',
    height=600
)

grafico2.add_hline(y=0, line_dash="dash", line_color="red", opacity=0.3)
grafico2.add_vline(x=metricas['Volatilidad (%)'].median(), line_dash="dash", line_color="gray", opacity=0.3)

print("‚úì")

# --- GR√ÅFICO 3: Matriz de Correlaci√≥n ---

print("3. Creando matriz de correlaciones... ", end="")

grafico3 = go.Figure(
    data=go.Heatmap(
        z=correlaciones.values,
        x=correlaciones.columns,
        y=correlaciones.columns,
        colorscale='RdBu',
        zmid=0,
        text=correlaciones.values.round(2),
        texttemplate='%{text}',
        textfont={"size": 11},
        colorbar=dict(title="Correlaci√≥n")
    )
)

grafico3.update_layout(
    title='Matriz de Correlaciones<br><sub>Rojo = correlaci√≥n positiva | Azul = negativa</sub>',
    template='plotly_white',
    height=600,
    xaxis={'side': 'bottom'}
)

print("‚úì")

# --- GR√ÅFICO 4: Dashboard Integrado ---

print("4. Creando dashboard integrado... ", end="")

dashboard = make_subplots(
    rows=2, cols=2,
    subplot_titles=(
        'Evoluci√≥n Comparativa',
        'Riesgo vs Rendimiento',
        'Tabla de M√©tricas',
        'Correlaciones'
    ),
    specs=[
        [{"type": "scatter"}, {"type": "scatter"}],
        [{"type": "table"}, {"type": "heatmap"}]
    ],
    row_heights=[0.5, 0.5],
    vertical_spacing=0.12,
    horizontal_spacing=0.12
)

# Panel 1: Evoluci√≥n
for activo in precios_base100.columns:
    dashboard.add_trace(
        go.Scatter(x=precios_base100.index, y=precios_base100[activo],
                  mode='lines', name=activo, showlegend=True),
        row=1, col=1
    )

# Panel 2: Riesgo-Rendimiento
dashboard.add_trace(
    go.Scatter(
        x=metricas['Volatilidad (%)'],
        y=metricas['Rendimiento (%)'],
        mode='markers+text',
        text=metricas.index,
        textposition='top center',
        marker=dict(size=12, color='steelblue'),
        showlegend=False
    ),
    row=1, col=2
)

# Panel 3: Tabla de m√©tricas
tabla_metricas = metricas[['Rendimiento (%)', 'Volatilidad (%)', 'Ratio Sharpe']].round(2)
dashboard.add_trace(
    go.Table(
        header=dict(
            values=['<b>Activo</b>'] + ['<b>' + c + '</b>' for c in tabla_metricas.columns],
            fill_color='lightgray',
            align='left',
            font=dict(size=12)
        ),
        cells=dict(
            values=[tabla_metricas.index] + [tabla_metricas[c] for c in tabla_metricas.columns],
            fill_color='white',
            align='left',
            font=dict(size=11)
        )
    ),
    row=2, col=1
)

# Panel 4: Correlaciones
dashboard.add_trace(
    go.Heatmap(
        z=correlaciones.values,
        x=correlaciones.columns,
        y=correlaciones.columns,
        colorscale='RdBu',
        zmid=0,
        showscale=False
    ),
    row=2, col=2
)

dashboard.update_layout(
    title_text=f"<b>{NOMBRE_PROYECTO} - Dashboard Completo</b>",
    title_x=0.5,
    height=1000,
    template='plotly_white',
    showlegend=True,
    legend=dict(orientation="h", yanchor="top", y=-0.05, xanchor="center", x=0.5)
)

dashboard.update_xaxes(title_text="Fecha", row=1, col=1)
dashboard.update_yaxes(title_text="√çndice (Base 100)", row=1, col=1)
dashboard.update_xaxes(title_text="Volatilidad (%)", row=1, col=2)
dashboard.update_yaxes(title_text="Rendimiento (%)", row=1, col=2)

print("‚úì")

print("\n‚úì Todas las visualizaciones generadas correctamente\n")

# ------------------------------------------------------------------------------
# PASO 5: Exportaci√≥n autom√°tica de archivos
# ------------------------------------------------------------------------------

print("="*80)
print("GUARDANDO ARCHIVOS EN GOOGLE DRIVE")
print("="*80 + "\n")

# Guardar gr√°ficos HTML
grafico1.write_html(CARPETA_GUARDADO + "01_evolucion_precios.html")
print("‚úì 01_evolucion_precios.html")

grafico2.write_html(CARPETA_GUARDADO + "02_riesgo_rendimiento.html")
print("‚úì 02_riesgo_rendimiento.html")

grafico3.write_html(CARPETA_GUARDADO + "03_correlaciones.html")
print("‚úì 03_correlaciones.html")

dashboard.write_html(CARPETA_GUARDADO + "04_dashboard_completo.html")
print("‚úì 04_dashboard_completo.html")

# Guardar datos CSV
metricas.to_csv(CARPETA_GUARDADO + "metricas_resumen.csv")
print("‚úì metricas_resumen.csv")

correlaciones.to_csv(CARPETA_GUARDADO + "matriz_correlaciones.csv")
print("‚úì matriz_correlaciones.csv")

datos_precios.to_csv(CARPETA_GUARDADO + "precios_historicos.csv")
print("‚úì precios_historicos.csv")

retornos.to_csv(CARPETA_GUARDADO + "retornos_diarios.csv")
print("‚úì retornos_diarios.csv")

# Crear reporte de texto
with open(CARPETA_GUARDADO + "00_RESUMEN.txt", 'w', encoding='utf-8') as f:
    f.write("="*80 + "\n")
    f.write(f"{NOMBRE_PROYECTO}\n")
    f.write("="*80 + "\n\n")

    f.write(f"Fecha de an√°lisis: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    f.write(f"Per√≠odo analizado: {FECHA_INICIO} a {FECHA_FIN}\n")
    f.write(f"Activos analizados: {len(MIS_ACTIVOS)}\n")
    f.write(f"D√≠as de cotizaci√≥n: {len(datos_precios)}\n\n")

    f.write("="*80 + "\n")
    f.write("RESULTADOS PRINCIPALES\n")
    f.write("="*80 + "\n\n")

    f.write(f"Mejor rendimiento: {metricas['Rendimiento (%)'].idxmax()} ")
    f.write(f"({metricas['Rendimiento (%)'].max():.2f}%)\n\n")

    f.write(f"Mayor volatilidad: {metricas['Volatilidad (%)'].idxmax()} ")
    f.write(f"({metricas['Volatilidad (%)'].max():.2f}%)\n\n")

    f.write(f"Mejor Ratio Sharpe: {metricas['Ratio Sharpe'].idxmax()} ")
    f.write(f"({metricas['Ratio Sharpe'].max():.3f})\n\n")

    f.write("="*80 + "\n")
    f.write("M√âTRICAS DETALLADAS\n")
    f.write("="*80 + "\n\n")
    f.write(metricas.round(2).to_string())

    f.write("\n\n" + "="*80 + "\n")
    f.write("ARCHIVOS GENERADOS\n")
    f.write("="*80 + "\n\n")
    f.write("Visualizaciones HTML (interactivas):\n")
    f.write("  ‚Ä¢ 01_evolucion_precios.html\n")
    f.write("  ‚Ä¢ 02_riesgo_rendimiento.html\n")
    f.write("  ‚Ä¢ 03_correlaciones.html\n")
    f.write("  ‚Ä¢ 04_dashboard_completo.html\n\n")
    f.write("Datos CSV (para Excel):\n")
    f.write("  ‚Ä¢ metricas_resumen.csv\n")
    f.write("  ‚Ä¢ matriz_correlaciones.csv\n")
    f.write("  ‚Ä¢ precios_historicos.csv\n")
    f.write("  ‚Ä¢ retornos_diarios.csv\n")

print("‚úì 00_RESUMEN.txt")

print("\n" + "="*80)
print("‚úì DASHBOARD COMPLETADO EXITOSAMENTE")
print("="*80)

print(f"""
RESUMEN FINAL:

üìä Activos analizados: {len(MIS_ACTIVOS)}
üìÖ Per√≠odo: {datos_precios.index[0].strftime('%Y-%m-%d')} a {datos_precios.index[-1].strftime('%Y-%m-%d')}
üìà D√≠as de cotizaci√≥n: {len(datos_precios)}

üìÅ Archivos guardados en:
   {CARPETA_GUARDADO}

üèÜ Mejor rendimiento: {metricas['Rendimiento (%)'].idxmax()} ({metricas['Rendimiento (%)'].max():.2f}%)
üìâ Mayor volatilidad: {metricas['Volatilidad (%)'].idxmax()} ({metricas['Volatilidad (%)'].max():.2f}%)
‚ú® Mejor Sharpe: {metricas['Ratio Sharpe'].idxmax()} ({metricas['Ratio Sharpe'].max():.3f})

PR√ìXIMOS PASOS:
1. Abre tu Google Drive y busca la carpeta: {CARPETA_GUARDADO}
2. Abre los archivos .html en tu navegador (son interactivos)
3. Abre los archivos .csv en Excel para an√°lisis adicional
4. Lee el archivo 00_RESUMEN.txt para un resumen completo

¬øQuieres analizar otros activos?
‚Üí Cambia la variable MIS_ACTIVOS al inicio y vuelve a ejecutar
""")

# Mostrar gr√°fico principal
print("\nVisualizando gr√°fico principal...")
grafico1.show()

"""# **Clase 2**"""

# ============================================================================
# TRANSFORMACI√ìN A FORMATO LARGO PARA LOOKER STUDIO
# ============================================================================

print("\n" + "="*80)
print("TRANSFORMANDO DATOS A FORMATO LARGO")
print("="*80)

# Crear directorio espec√≠fico para Looker Studio
RUTA_LOOKER = "/content/drive/MyDrive/Posdoctorado/Dashboard Financiero - Looker Studio/"
os.makedirs(RUTA_LOOKER, exist_ok=True)
print(f"\nCarpeta de destino: {RUTA_LOOKER}")

# --- 1. PRECIOS EN FORMATO LARGO ---
print("\n1. Transformando precios hist√≥ricos...")

precios_largo = datos.reset_index().melt(
    id_vars='Date',
    var_name='Activo',
    value_name='Precio'
)

# Calcular precio normalizado (Base 100) por grupo
precio_inicial = precios_largo.groupby('Activo')['Precio'].transform('first')
precios_largo['Precio_Base100'] = (precios_largo['Precio'] / precio_inicial) * 100

# Ordenar cronol√≥gicamente
precios_largo = precios_largo.sort_values(['Activo', 'Date']).reset_index(drop=True)

print(f"   Registros: {len(precios_largo):,}")
print(f"   Per√≠odo: {precios_largo['Date'].min()} a {precios_largo['Date'].max()}")
print(f"   Activos: {precios_largo['Activo'].nunique()}")

# --- 2. RETORNOS EN FORMATO LARGO ---
print("\n2. Transformando retornos diarios...")

retornos_largo = retornos.reset_index().melt(
    id_vars='Date',
    var_name='Activo',
    value_name='Retorno_Diario'
)

# Convertir a porcentaje
retornos_largo['Retorno_Pct'] = retornos_largo['Retorno_Diario'] * 100

# Calcular retorno acumulado por activo
retornos_largo = retornos_largo.sort_values(['Activo', 'Date']).reset_index(drop=True)
retornos_largo['Retorno_Acumulado'] = retornos_largo.groupby('Activo')['Retorno_Diario'].transform(
    lambda x: (1 + x).cumprod()
)

# Calcular drawdown por activo
def calcular_drawdown_serie(retornos_serie):
    cumulative = (1 + retornos_serie).cumprod()
    running_max = cumulative.expanding().max()
    return (cumulative - running_max) / running_max

retornos_largo['Drawdown'] = retornos_largo.groupby('Activo')['Retorno_Diario'].transform(
    calcular_drawdown_serie
) * 100

print(f"   Registros: {len(retornos_largo):,}")

# --- 3. VOLATILIDAD ROLLING EN FORMATO LARGO ---
print("\n3. Calculando volatilidad m√≥vil 30 d√≠as...")

vol_rolling = retornos.rolling(window=30).std() * np.sqrt(252) * 100
vol_rolling_largo = vol_rolling.reset_index().melt(
    id_vars='Date',
    var_name='Activo',
    value_name='Volatilidad_30d'
)

print(f"   Registros: {len(vol_rolling_largo):,}")

# --- 4. M√âTRICAS RESUMEN POR ACTIVO ---
print("\n4. Preparando m√©tricas consolidadas...")

# Resetear √≠ndices
metricas_looker = metricas.reset_index()
metricas_looker.rename(columns={'index': 'Activo'}, inplace=True)

metricas_avanzadas_looker = metricas_avanzadas.reset_index()
metricas_avanzadas_looker.rename(columns={'index': 'Activo'}, inplace=True)

# Merge de todas las m√©tricas
metricas_completas_looker = metricas_looker.merge(
    metricas_avanzadas_looker,
    on='Activo',
    how='outer'
)

# Agregar datos fundamentales si existen
if not datos_fundamentales.empty:
    datos_fundamentales_looker = datos_fundamentales.reset_index()
    datos_fundamentales_looker.rename(columns={'index': 'Activo'}, inplace=True)

    metricas_completas_looker = metricas_completas_looker.merge(
        datos_fundamentales_looker,
        on='Activo',
        how='left'
    )

print(f"   Activos: {len(metricas_completas_looker)}")
print(f"   M√©tricas por activo: {len(metricas_completas_looker.columns) - 1}")

# --- 5. DATASET CONSOLIDADO PRINCIPAL ---
print("\n5. Generando dataset consolidado...")

# Merge precios + retornos
datos_consolidados = precios_largo.merge(
    retornos_largo[['Date', 'Activo', 'Retorno_Pct', 'Retorno_Acumulado', 'Drawdown']],
    on=['Date', 'Activo'],
    how='left'
)

# Agregar volatilidad rolling
datos_consolidados = datos_consolidados.merge(
    vol_rolling_largo,
    on=['Date', 'Activo'],
    how='left'
)

# Agregar m√©tricas por activo (broadcast a todas las fechas)
datos_consolidados = datos_consolidados.merge(
    metricas_completas_looker,
    on='Activo',
    how='left'
)

print(f"   Registros totales: {len(datos_consolidados):,}")
print(f"   Columnas: {len(datos_consolidados.columns)}")

# --- 6. MATRIZ DE CORRELACIONES EN FORMATO ADECUADO ---
print("\n6. Preparando matriz de correlaciones...")

# Convertir matriz a formato largo para Looker
correlaciones_largo = correlaciones.reset_index().melt(
    id_vars='index',
    var_name='Activo_2',
    value_name='Correlacion'
)
correlaciones_largo.rename(columns={'index': 'Activo_1'}, inplace=True)

print(f"   Pares de correlaci√≥n: {len(correlaciones_largo)}")

# --- 7. EXPORTACI√ìN ---
print("\n" + "="*80)
print("EXPORTANDO ARCHIVOS PARA LOOKER STUDIO")
print("="*80 + "\n")

# Archivo principal (recomendado para conectar en Looker)
datos_consolidados.to_csv(RUTA_LOOKER + "datos_consolidados.csv", index=False, encoding='utf-8')
print(f"  Archivo principal guardado:")
print(f"  datos_consolidados.csv")
print(f"  ({len(datos_consolidados):,} filas √ó {len(datos_consolidados.columns)} columnas)\n")

# Archivos complementarios
precios_largo.to_csv(RUTA_LOOKER + "precios_largo.csv", index=False, encoding='utf-8')
print(f"  precios_largo.csv ({len(precios_largo):,} filas)")

retornos_largo.to_csv(RUTA_LOOKER + "retornos_largo.csv", index=False, encoding='utf-8')
print(f"  retornos_largo.csv ({len(retornos_largo):,} filas)")

metricas_completas_looker.to_csv(RUTA_LOOKER + "metricas_completas.csv", index=False, encoding='utf-8')
print(f"  metricas_completas.csv ({len(metricas_completas_looker)} filas)")

correlaciones_largo.to_csv(RUTA_LOOKER + "correlaciones_largo.csv", index=False, encoding='utf-8')
print(f"  correlaciones_largo.csv ({len(correlaciones_largo)} filas)")

vol_rolling_largo.to_csv(RUTA_LOOKER + "volatilidad_rolling.csv", index=False, encoding='utf-8')
print(f"  volatilidad_rolling.csv ({len(vol_rolling_largo):,} filas)")

# Guardar tambi√©n las versiones originales (formato ancho) para referencia
datos.to_csv(RUTA_LOOKER + "precios_ancho_original.csv", encoding='utf-8')
retornos.to_csv(RUTA_LOOKER + "retornos_ancho_original.csv", encoding='utf-8')
correlaciones.to_csv(RUTA_LOOKER + "correlaciones_matriz_original.csv", encoding='utf-8')

print(f"  precios_ancho_original.csv")
print(f"  retornos_ancho_original.csv")
print(f"  correlaciones_matriz_original.csv")

# --- 8. RESUMEN DE ESTRUCTURA ---
print("\n" + "="*80)
print("RESUMEN DE ESTRUCTURA DE DATOS")
print("="*80 + "\n")

print("ARCHIVO PRINCIPAL: datos_consolidados.csv")
print("-" * 80)
print("\nColumnas disponibles:")
for i, col in enumerate(datos_consolidados.columns, 1):
    tipo = datos_consolidados[col].dtype
    print(f"  {i:2d}. {col:40s} ({tipo})")

print(f"\nPrimeras 5 filas del dataset consolidado:")
print(datos_consolidados.head().to_string())

print("\n" + "="*80)
print("TRANSFORMACI√ìN COMPLETADA")
print("="*80)

print(f"""
ARCHIVOS GENERADOS EN:
{RUTA_LOOKER}

ARCHIVO RECOMENDADO PARA LOOKER STUDIO:
  datos_consolidados.csv

  Este archivo contiene:
  - Series temporales de precios (formato largo)
  - Retornos diarios y acumulados
  - Volatilidad rolling
  - Todas las m√©tricas por activo
  - Drawdown hist√≥rico

PR√ìXIMOS PASOS:
1. Subir datos_consolidados.csv a Google Sheets
2. Conectar Google Sheets en Looker Studio
3. Crear visualizaciones usando columnas:
   - Dimensi√≥n temporal: Date
   - Dimensi√≥n categ√≥rica: Activo
   - M√©tricas: Precio, Retorno_Pct, Volatilidad_30d, etc.
""")